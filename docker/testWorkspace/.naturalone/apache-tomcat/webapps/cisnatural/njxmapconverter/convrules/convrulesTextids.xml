<?xml version="1.0" encoding="UTF-8"?>
<!-- ====================================================================== -->
<!--   TEXTID  DEFAULT Conversion Rules File                                                                                -->
<!--                                                                                                                                              -->
<!--  In difference to the conrulesDEFAULT file a conversion listener is added. The conversion listener  -->
<!--  generates textids and writes a corresponding multilanguage file containing the textids and texts.  -->
<!--  To convert ltLiterals to label controls the template $LABELTEXTID_TEMPLATE is used.              -->
<!--                                                                                                                                              -->
<!--   * Grid Headers:                                                                                                                     -->
<!--             The names of the Fields are used as grid headers. To do so the                                      -->
<!--             DEFAULTAreaHeaderHandler is used. (See variable $$headerhandler$$).                        -->
<!--             HINT: There are more Header Handlers available.                                                           -->
<!--                                                                                                                                              -->
<!--   * Conversion Listeners:                                                                                                          -->
<!--            The TEXTIDConversionListener is used. (See variable $$convlistener$$).                           -->
<!--            HINT:  This class is also available in source code.                                                          -->
<!--                                                                                                                                              -->
<!--   * Grid Generation:                                                                                                                 -->
<!--             Arrays with only display only fields are converted into a TEXTGRIDSSS2 control              -->
<!--             The template OGRID_TEMPLATE is used.                                                                   -->
<!--             Other arrays are converted into a ROWAREA2 control. The template IGRID_TEMPLATE  -->
<!--             is used.                                                                                                                     -->
<!--                                                                                                                                              -->
<!--   * Horizontal Field Lists:                                                                                                         -->
<!--             Horizontal array fields are converted into single field controls. The offset is added to the    -->
<!--             fieldname. To do so the template FIELDSEQ_TEMPLATE is used.                                  -->
<!--             HINT: There is also a horizontal fieldlist control available. the rules files conrulesFieldlist   -->
<!--             and convrulesFieldlist2 contain rules for mapping arrays to horizontal fieldlist controls.      -->
<!--                                                                                                                                              -->
<!--   * Function Generation:                                                                                                          -->
<!--            The Function_rule in the "Application Specific Rules" section converts literal with specific  -->
<!--            patterns to buttons.                                                                                                     -->
<!--            HINT1: There is also are also horizontal and vertical button list controls available. You       -->
<!--                       You can use the BUTTONLIST_TEMPLATE and BUTTONITEM_TEMPLATE         -->
<!--            HINT2: The NATPAGEPFKEYS_TEMPLATE contains an already prepared horizontal       -->
<!--                       button list.                                                                                                       -->
<!--                                                                                                                                              -->
<!--   For more information about handlers, listeners and customization of the conversion process       -->
<!--   see also the "Map Conversion Extension API - Documentation" in the Development Workplace   -->
<!--   under "Tools & Documentation" / Natural Tools / Map Conversion Extension API".                     -->
<!--                                                                                                                                              -->
<!-- ====================================================================== -->
<convrules xmlns="http://www.softwareag.com/nat/mapconvrules" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.softwareag.com/nat/mapconvrules ./convrules.xsd">
	<!-- ====================================================================== -->
	<!--   Default system variables. System variables are used from within the MapConverter framework.    -->
	<!-- ====================================================================== -->
	<convvariable dynamic="true" varkind="sys">
		<description>Internal usage within converters: The resolved name of the currently processed input field.</description>
		<varname>$$name$$</varname>
	</convvariable>
	<convvariable dynamic="true" varkind="sys">
		<description>Internal usage within converters: The resolved header name of an area header.</description>
		<varname>$$header$$</varname>
	</convvariable>
	<convvariable dynamic="false" varkind="sys">
		<description>Internal usage within converters: Specifies the Java class for grid header discovery.</description>
		<varname>$$headerhandler$$</varname>
		<varvalue>com.softwareag.natural.mapconverter.converters.DEFAULTAreaHeaderHandler</varvalue>
	</convvariable>
	<convvariable dynamic="false" varkind="sys">
		<description>Internal usage within converters: Specifies a Java class as listener to the conversion process.</description>
		<varname>$$convlistener$$</varname>
		<varvalue>com.softwareag.natural.mapconverter.converters.TEXTIDConversionListener</varvalue>
	</convvariable>
	<convvariable dynamic="true" varkind="sys">
		<description>Internal usage within converters: The width of the currently processed input field.</description>
		<varname>$$width$$</varname>
	</convvariable>
	<convvariable dynamic="true" varkind="sys">
		<description>Internal usage within converter framework: Identifies a targetItem according to the default rule selection.</description>
		<varname>$$</varname>
	</convvariable>	
	<convvariable dynamic="false" varkind="sys">
		<description>Internal usage within converter framework: Computation of the width property of controls in pixels is $$width$$ * $$widthfactor$$</description>
		<varname>$$widthfactor$$</varname>
		<varvalue>10</varvalue>
	</convvariable>
	<!-- Alternative width factor for Japanese full width characters.
	<convvariable dynamic="false" varkind="sys">
		<description>Internal usage within converter framework: Alternative width factor for Japanese full width characters.</description>
		<varname>$$widthfactor2$$</varname>
		<varvalue>16</varvalue>
	</convvariable> -->
	<convvariable dynamic="false" varkind="sys">
		<description>Internal usage within converter framework: The minimum width property of controls in pixels. Use this to increase the default size of very small fields (1-2 characters).</description>
		<varname>$$minwidth$$</varname>
		<varvalue>15</varvalue>
	</convvariable>
	<convvariable dynamic="false" varkind="sys">
		<description>Internal usage within converter framework: The default name of a grid.</description>
		<varname>$$gridname$$</varname>
		<varvalue>lines</varvalue>
	</convvariable>
	<convvariable dynamic="false" varkind="appl">
		<description>Application specific usage to handle field sequences, which are no tables.</description>
		<varname>$$index$$</varname>
	</convvariable>
	<!-- ====================================================================== -->
	<!--   Default mapping rules                                                                                                            -->
	<!--   Naming conventions:                                                                                                             -->
	<!--      * A name starting with "$" references a TEMPLATE, or a variable.                                          -->
	<!--      * Template names always end with "TEMPLATE". It is the filename of the template file            -->
	<!--         without extension ".xml".                                                                                                 -->
	<!-- ====================================================================== -->
	<convrule rulename="Root_rule">
		<description>Exactly 1 rule with the mapxml root element as sourceitem (="map") is required. This rule must define the natpage template and root insert position of convertion tree as target. </description>
		<source>
			<sourceitem>map</sourceitem>
		</source>
		<target>
			<targetitem>$NATPAGE_TEMPLATE.$MAPROOT</targetitem>
		</target>
	</convrule>
	<!-- =============== RULES for System Variable handling =============================== -->
	<convrule rulename="SysvartypeA_rule">
		<description>System variable string types.</description>
		<source>
			<sourceitem>ifField</sourceitem>
			<sourcecond>
				<condattr>ifFormat</condattr>
				<condvalue>A([0-9]+)</condvalue>
			</sourcecond>
			<sourcecond>
				<condattr>ifName</condattr>
				<condvalue>\*.*</condvalue>
			</sourcecond>
		</source>
		<target>
			<targetitem>$$</targetitem>
			<targetattr>
				<attrname>njx:natstringtype</attrname>
				<attrvalue>A</attrvalue>
			</targetattr>
		</target>
	</convrule>
	<convrule rulename="SysvartypeU_rule">
		<description>System variable string types.</description>
		<source>
			<sourceitem>ifField</sourceitem>
			<sourcecond>
				<condattr>ifFormat</condattr>
				<condvalue>U([0-9]+)</condvalue>
			</sourcecond>
			<sourcecond>
				<condattr>ifName</condattr>
				<condvalue>\*.*</condvalue>
			</sourcecond>
		</source>
		<target>
			<targetitem>$$</targetitem>
			<targetattr>
				<attrname>njx:natstringtype</attrname>
				<attrvalue>U</attrvalue>
			</targetattr>
		</target>
	</convrule>
	<convrule rulename="natiosys_rule">
		<description>Adds the information that a system variable is io.</description>
		<source>
			<sourceitem>ifField</sourceitem>
			<sourcecond>
				<condattr>//ifAD</condattr>
				<condvalue>[^O]*</condvalue>
			</sourcecond>
			<sourcecond>
				<condattr>ifName</condattr>
				<condvalue>\*.*</condvalue>
			</sourcecond>
		</source>
		<target>
			<targetitem>$$</targetitem>
			<targetattr>
				<attrname>njx:natsysio</attrname>
				<attrvalue>true</attrvalue>
			</targetattr>
		</target>
	</convrule>
	<!-- =============== RULES for Datatype Handling  =============================== -->
	<convrule rulename="AfixType_rule">
		<description>All Natural "An" dffields are converted to the application designer datatype "string n". Example: "A10" is converted to "string 10". </description>
		<source>
			<sourceitem>dfField</sourceitem>
			<selection>
				<selectattr>dfFormat</selectattr>
				<selectval>A([0-9]+)</selectval>
			</selection>
		</source>
		<target>
			<targetitem>$$</targetitem>
			<targetattr>
				<attrname>datatype</attrname>
				<attrvalue>string $1</attrvalue>
			</targetattr>
		</target>
	</convrule>
	<convrule rulename="AdynType_rule">
		<description>All Natural "A dynamic" dffields are converted to the application designer datatype "string". </description>
		<source>
			<sourceitem>dfField</sourceitem>
			<selection>
				<selectattr>dfFormat</selectattr>
				<selectval>A</selectval>
			</selection>
		</source>
		<target>
			<targetitem>$$</targetitem>
			<targetattr>
				<attrname>datatype</attrname>
				<attrvalue>string</attrvalue>
			</targetattr>
		</target>
	</convrule>
	<convrule rulename="BfixType_rule">
		<description>All Natural "Bn" dffields are converted to the application designer datatype "string n". Example: "B10" is converted to "string 10". </description>
		<source>
			<sourceitem>dfField</sourceitem>
			<selection>
				<selectattr>dfFormat</selectattr>
				<selectval>B([0-9]+)</selectval>
			</selection>
		</source>
		<target>
			<targetitem>$$</targetitem>
			<targetattr>
				<attrname>datatype</attrname>
				<attrvalue>string $1</attrvalue>
			</targetattr>
		</target>
	</convrule>
	<convrule rulename="BdynType_rule">
		<description>All Natural "B dynamic" dffields are converted to the application designer datatype "string".</description>
		<source>
			<sourceitem>dfField</sourceitem>
			<selection>
				<selectattr>dfFormat</selectattr>
				<selectval>B</selectval>
			</selection>
		</source>
		<target>
			<targetitem>$$</targetitem>
			<targetattr>
				<attrname>datatype</attrname>
				<attrvalue>string</attrvalue>
			</targetattr>
		</target>
	</convrule>
	<convrule rulename="DType_rule">
		<description>All Natural "D" dffields are converted to the application designer datatype "date". </description>
		<source>
			<sourceitem>dfField</sourceitem>
			<sourcecond>
				<condattr>dfFormat</condattr>
				<condvalue>D</condvalue>
			</sourcecond>
		</source>
		<target>
			<targetitem>$$</targetitem>
			<targetattr>
				<attrname>datatype</attrname>
				<attrvalue>date</attrvalue>
			</targetattr>
		</target>
	</convrule>
	<convrule rulename="F4Type_rule">
		<description>All Natural F4 dffields are converted to the application designer datatype "float". </description>
		<source>
			<sourceitem>dfField</sourceitem>
			<selection>
				<selectattr>dfFormat</selectattr>
				<selectval>F4</selectval>
			</selection>
		</source>
		<target>
			<targetitem>$$</targetitem>
			<targetattr>
				<attrname>datatype</attrname>
				<attrvalue>float</attrvalue>
			</targetattr>
		</target>
	</convrule>
	<convrule rulename="F8Type_rule">
		<description>All Natural F8 dffields are converted to the application designer datatype "xs:double". </description>
		<source>
			<sourceitem>dfField</sourceitem>
			<selection>
				<selectattr>dfFormat</selectattr>
				<selectval>F8</selectval>
			</selection>
		</source>
		<target>
			<targetitem>$$</targetitem>
			<targetattr>
				<attrname>datatype</attrname>
				<attrvalue>xs:double</attrvalue>
			</targetattr>
		</target>
	</convrule>
	<convrule rulename="I1Type_rule">
		<description>All Natural I1 dffields are converted to the application designer datatype "xs:byte". </description>
		<source>
			<sourceitem>dfField</sourceitem>
			<selection>
				<selectattr>dfFormat</selectattr>
				<selectval>I1</selectval>
			</selection>
		</source>
		<target>
			<targetitem>$$</targetitem>
			<targetattr>
				<attrname>datatype</attrname>
				<attrvalue>xs:byte</attrvalue>
			</targetattr>
		</target>
	</convrule>
	<convrule rulename="I2Type_rule">
		<description>All Natural I2 dffields are converted to the application designer datatype "xs:short". </description>
		<source>
			<sourceitem>dfField</sourceitem>
			<selection>
				<selectattr>dfFormat</selectattr>
				<selectval>I2</selectval>
			</selection>
		</source>
		<target>
			<targetitem>$$</targetitem>
			<targetattr>
				<attrname>datatype</attrname>
				<attrvalue>xs:short</attrvalue>
			</targetattr>
		</target>
	</convrule>
	<convrule rulename="I4Type_rule">
		<description>All Natural I4 dffields are converted to the application designer datatype "long". </description>
		<source>
			<sourceitem>dfField</sourceitem>
			<selection>
				<selectattr>dfFormat</selectattr>
				<selectval>I4</selectval>
			</selection>
		</source>
		<target>
			<targetitem>$$</targetitem>
			<targetattr>
				<attrname>datatype</attrname>
				<attrvalue>int</attrvalue>
			</targetattr>
		</target>
	</convrule>
	<convrule rulename="LType_rule">
		<description>All Natural L dffields are converted to a checkbox control. </description>
		<source>
			<sourceitem>ifField</sourceitem>
			<sourcecond>
				<condattr>ifFormat</condattr>
				<condvalue>L</condvalue>
			</sourcecond>
			<sourcecond>
				<condattr>//ifAD</condattr>
				<condvalue>[^O]*</condvalue>
			</sourcecond>			
		</source>
		<target>
			<targetitem>$CHECKBOX_TEMPLATE</targetitem>
		</target>
	</convrule>
	<convrule rulename="NType_rule">
		<description>All Natural "N" dffields are converted to the application designer datatype N n.n. </description>
		<source>
			<sourceitem>dfField</sourceitem>
			<selection>
				<selectattr>dfFormat</selectattr>
				<selectval>N(.*)</selectval>
			</selection>
		</source>
		<target>
			<targetitem>$$</targetitem>
			<targetattr>
				<attrname>datatype</attrname>
				<attrvalue>$0</attrvalue>
			</targetattr>
		</target>
	</convrule>
	<convrule rulename="PType_rule">
		<description>All Natural "P" dffields are converted to the application designer datatype N n.n. </description>
		<source>
			<sourceitem>dfField</sourceitem>
			<selection>
				<selectattr>dfFormat</selectattr>
				<selectval>P(.*)</selectval>
			</selection>
		</source>
		<target>
			<targetitem>$$</targetitem>
			<targetattr>
				<attrname>datatype</attrname>
				<attrvalue>$0</attrvalue>
			</targetattr>
		</target>
	</convrule>
	<convrule rulename="TType_rule">
		<description>All Natural "T" dffields are converted to the application designer datatype "time". </description>
		<source>
			<sourceitem>dfField</sourceitem>
			<sourcecond>
				<condattr>dfFormat</condattr>
				<condvalue>T</condvalue>
			</sourcecond>
		</source>
		<target>
			<targetitem>$$</targetitem>
			<targetattr>
				<attrname>datatype</attrname>
				<attrvalue>time</attrvalue>
			</targetattr>
		</target>
	</convrule>
	<convrule rulename="UfixType_rule">
		<description>All Natural "Un" dffields are converted to the application designer datatype "string n". Example: "U10" is converted to "string 10". </description>
		<source>
			<sourceitem>dfField</sourceitem>
			<selection>
				<selectattr>dfFormat</selectattr>
				<selectval>U([0-9]+)</selectval>
			</selection>
		</source>
		<target>
			<targetitem>$$</targetitem>
			<targetattr>
				<attrname>datatype</attrname>
				<attrvalue>string $1</attrvalue>
			</targetattr>
		</target>
	</convrule>
	<convrule rulename="UdynType_rule">
		<description>All Natural "U dynamic" dffields are converted to the application designer datatype "string".</description>
		<source>
			<sourceitem>dfField</sourceitem>
			<selection>
				<selectattr>dfFormat</selectattr>
				<selectval>U</selectval>
			</selection>
		</source>
		<target>
			<targetitem>$$</targetitem>
			<targetattr>
				<attrname>datatype</attrname>
				<attrvalue>string</attrvalue>
			</targetattr>
		</target>
	</convrule>
	<!-- =============== RULES for Simple Fields  =============================== -->
	<convrule rulename="Label2_rule">
		<description>Defines the control template to be used for literal input fields.</description>
		<source>
			<sourceitem>ltLiteral</sourceitem>
		</source>
		<target>
			<targetitem>$LABELTEXTID_TEMPLATE</targetitem>
		</target>
	</convrule>
	<convrule rulename="Ifield_rule">
		<description>Defines the control template to be used for input fields which are not specified as output only.</description>
		<source>
			<sourceitem>ifField</sourceitem>
			<sourcecond>
				<condattr>//ifAD</condattr>
				<condvalue>[^O]*</condvalue>
			</sourcecond>
		</source>
		<target>
			<targetitem>$IFIELD_TEMPLATE</targetitem>
		</target>
	</convrule>
	<convrule rulename="Ofield_rule">
		<description>Defines the control template to be used for input fields which are specified as output only.</description>
		<source>
			<sourceitem>ifField</sourceitem>
			<sourcecond>
				<condattr>//ifAD</condattr>
				<condvalue>.*O.*</condvalue>
			</sourcecond>
		</source>
		<target>
			<targetitem>$OFIELD_TEMPLATE</targetitem>
		</target>
	</convrule>
	<convrule rulename="UPPERCASE_rule">
		<description>Defines the control template to be used for input fields which are not specified as output only.</description>
		<source>
			<sourceitem>ifField</sourceitem>
			<sourcecond>
				<condattr>//ifAD</condattr>
				<condvalue>.*T.*</condvalue>
			</sourcecond>
		</source>
		<target>
			<targetitem>$$</targetitem>
			<targetattr>
				<attrname>uppercase</attrname>
				<attrvalue>true</attrvalue>
			</targetattr>
		</target>
	</convrule>
	<!-- =============== RULES for Name Conversions  =============================== -->
	<convrule rulename="Ifname_rule">
		<description>Transforms the iffield attribute to a valid xml name.</description>
		<source>
			<sourceitem>ifField</sourceitem>
			<selection>
				<selectattr>ifName</selectattr>
				<selectval>(.*)[#,\$](.*)</selectval>
			</selection>
		</source>
		<target>
			<targetitem>$$</targetitem>
			<targetattr>
				<attrname>$$name$$</attrname>
				<attrvalue>$0</attrvalue>
				<valreplace>#;\$</valreplace>
				<valreplacewith>X;Z</valreplacewith>
			</targetattr>
		</target>
		<target>
			<targetitem>$$</targetitem>
			<targetattr>
				<attrname>njx:natname</attrname>
				<attrvalue>$0</attrvalue>
			</targetattr>
		</target>
	</convrule>
	<convrule rulename="SYS_VARname_rule">
		<description>Transforms a system variable name to a valid xml name.</description>
		<source>
			<sourceitem>ifField</sourceitem>
			<selection>
				<selectattr>ifName</selectattr>
				<selectval>\*(.*)</selectval>
			</selection>
		</source>
		<target>
			<targetitem>$$</targetitem>
			<targetattr>
				<attrname>$$name$$</attrname>
				<attrvalue>$1</attrvalue>
			</targetattr>
		</target>
		<target>
			<targetitem>$$</targetitem>
			<targetattr>
				<attrname>njx:natsysvar</attrname>
				<attrvalue>$0</attrvalue>
			</targetattr>
		</target>
	</convrule>
	<convrule rulename="AIV_VARname_rule">
		<description>Transforms a system variable name to a valid xml name.</description>
		<source>
			<sourceitem>ifField</sourceitem>
			<selection>
				<selectattr>ifName</selectattr>
				<selectval>\+(.*)</selectval>
			</selection>
		</source>
		<target>
			<targetitem>$$</targetitem>
			<targetattr>
				<attrname>$$name$$</attrname>
				<attrvalue>$1</attrvalue>
			</targetattr>
		</target>
		<target>
			<targetitem>$$</targetitem>
			<targetattr>
				<attrname>njx:natname</attrname>
				<attrvalue>$0</attrvalue>
			</targetattr>
		</target>
	</convrule>
	<!-- =============== RULES for Natural Control Variables  =============================== -->
	<convrule rulename="CV_rule">
		<description>Adds a status property to the corresponding layout.</description>
		<source>
			<sourceitem>ifField</sourceitem>
			<selection>
				<selectattr>ifParms/ifCV</selectattr>
				<selectval>(.+)</selectval>
			</selection>
		</source>
		<target>
			<targetitem>$$</targetitem>
			<targetattr>
				<attrname>statusprop</attrname>
				<attrvalue>STATUS_$1</attrvalue>
				<valreplace>#</valreplace>
				<valreplacewith>X</valreplacewith>
			</targetattr>
		</target>
		<target>
			<targetitem>$$</targetitem>
			<targetattr>
				<attrname>njx:natcomment</attrname>
				<attrvalue>statusprop=STATUS_$1</attrvalue>
				<valreplace>#</valreplace>
				<valreplacewith>X</valreplacewith>
			</targetattr>
		</target>
	</convrule>
	<!-- =============== RULES for width handling in the layout  =============================== -->
	<convrule rulename="Lfiller_rule">
		<description>If no column value defined for a literal, a filler hdist is added before the control.</description>
		<source>
			<sourceitem>ltLiteral</sourceitem>
			<sourcecond>
				<condattr>ltCol</condattr>
				<condvalue>0</condvalue>
			</sourcecond>
		</source>
		<target>
			<targetitem>hdist</targetitem>
			<targetattr>
				<attrname>width</attrname>
				<attrvalue>4</attrvalue>
			</targetattr>
		</target>
		<target>
			<targetitem>$$</targetitem>
		</target>
	</convrule>
	<convrule rulename="Ffiller_rule">
		<description>If no column value defined for an input field, a filler hdist is added before the control.</description>
		<source>
			<sourceitem>ifField</sourceitem>
			<sourcecond>
				<condattr>ifCol</condattr>
				<condvalue>0</condvalue>
			</sourcecond>
		</source>
		<target>
			<targetitem>hdist</targetitem>
			<targetattr>
				<attrname>width</attrname>
				<attrvalue>4</attrvalue>
			</targetattr>
		</target>
		<target>
			<targetitem>$$</targetitem>
		</target>
	</convrule>
	<!-- =============== RULES for GRID and SEQUENCE AREA  handling   =============================== -->
	<convrule rulename="HdName_rule">
		<description>Mapping rule for headers in a grid.</description>
		<source>
			<sourceitem>gridArea//gridHeader</sourceitem>
			<selection>
				<selectattr>hdName</selectattr>
				<selectval>(.*)</selectval>
			</selection>
		</source>
		<target>
			<targetitem>$$</targetitem>
			<targetattr>
				<attrname>$$header$$</attrname>
				<attrvalue>$1</attrvalue>
				<valreplace>#</valreplace>
				<valreplacewith></valreplacewith>
			</targetattr>
		</target>
	</convrule>
	<convrule rulename="HdNameProperty_rule">
		<description>Mapping rule for headers in a grid.</description>
		<source>
			<sourceitem>gridArea//gridHeader</sourceitem>
			<selection>
				<selectattr>propName</selectattr>
				<selectval>[^\.]*\.(.*)</selectval>
			</selection>			
		</source>
		<target>
			<targetitem>$$</targetitem>
			<targetattr>
				<attrname>$$name$$</attrname>
				<attrvalue>$1</attrvalue>
				<valreplace>#</valreplace>
				<valreplacewith>X</valreplacewith>
			</targetattr>
		</target>
	</convrule>
	<convrule rulename="Gridname_rule">
		<description>Mapping rule for headers in a grid.</description>
		<source>
			<sourceitem>gridArea</sourceitem>
			<selection>
				<selectattr>gridName</selectattr>
				<selectval>(.*)</selectval>
			</selection>
		</source>
		<target>
			<targetitem>$$</targetitem>
			<targetattr>
				<attrname>$$gridname$$</attrname>
				<attrvalue>$1</attrvalue>
				<valreplace>#</valreplace>
				<valreplacewith>X</valreplacewith>
			</targetattr>
		</target>
		<target>
			<targetitem>$$</targetitem>
			<targetattr>
				<attrname>njx:natname</attrname>
				<attrvalue>$0</attrvalue>
			</targetattr>
		</target>
	</convrule>
	<convrule rulename="OGrid_rule">
		<description>If all fields are output only, map use the corresponding OGRID_TEMPLATE</description>
		<source>
			<sourceitem>gridArea</sourceitem>
			<sourcecond>
				<condattr>//ifAD</condattr>
				<condvalue>.*O.*</condvalue>
			</sourcecond>
		</source>
		<target>
			<targetitem>$OGRID_TEMPLATE</targetitem>
		</target>
	</convrule>
	<convrule rulename="OGriditem_rule">
		<description>Mapping rule for the items of an outputonly grid.</description>
		<source>
			<sourceitem>gridArea//ifField</sourceitem>
			<sourcecond>
				<condattr>..//ifAD</condattr>
				<condvalue>.*O.*</condvalue>
			</sourcecond>
		</source>
		<target>
			<targetitem>$OGRIDCOL.$OGRIDCOL_TEMPLATE</targetitem>
		</target>
	</convrule>
	<convrule rulename="Grid_rule">
		<description>If the grid contains modifiable input fields use the IGRID_TEMPLATE</description>
		<source>
			<sourceitem>gridArea</sourceitem>
		</source>
		<target>
			<targetitem>$GRID_TEMPLATE</targetitem>
		</target>
	</convrule>
	<convrule rulename="DispGriditem_rule">
		<description>Mapping rule for the displayonly items of grid.</description>
		<source>
			<sourceitem>gridArea//ifField</sourceitem>
			<sourcecond>
				<condattr>//ifAD</condattr>
				<condvalue>.*O.*</condvalue>
			</sourcecond>
		</source>
		<target>
			<targetitem>$GRIDITEM.$OGRIDITEM_TEMPLATE</targetitem>
		</target>
		<target>
			<targetitem>$GRIDHEADER.$GRIDHEADER_TEMPLATE</targetitem>
		</target>
	</convrule>
	<convrule rulename="Griditem_rule">
		<description>Mapping rule for the items of grid.</description>
		<source>
			<sourceitem>gridArea//ifField</sourceitem>
		</source>
		<target>
			<targetitem>$GRIDITEM.$GRIDITEM_TEMPLATE</targetitem>
		</target>
		<target>
			<targetitem>$GRIDHEADER.$GRIDHEADER_TEMPLATE</targetitem>
		</target>
	</convrule>
	<convrule rulename="Sequitem_rule">
		<description>Maps the index to a global index variable.</description>
		<source>
			<sourceitem>sequenceArea//ifField</sourceitem>
			<selection>
				<selectattr>ifIndex/ifOffset</selectattr>
				<selectval>(.*)</selectval>
			</selection>
		</source>
		<target>
			<targetitem>$$</targetitem>
			<targetattr>
				<attrname>$$index$$</attrname>
				<attrvalue>$1</attrvalue>
			</targetattr>
		</target>
	</convrule>
	<convrule rulename="Sequitem_rule">
		<description>Maps the index to a global index variable.</description>
		<source>
			<sourceitem>sequenceArea//ifField</sourceitem>
		</source>
		<target>
			<targetitem>$FIELDSEQ_TEMPLATE</targetitem>
		</target>
	</convrule>
	<convrule rulename="EmptyArea_rule">
		<description>Maps Empty Areas. For example you can map them to an empty row or skip the row.</description>
		<source>
			<sourceitem>//emptyArea</sourceitem>
		</source>
		<target>
			<targetitem>$EMPTYROW_TEMPLATE</targetitem>
		</target>
	</convrule>
	<!-- ======================================================================== -->
	<!--                          APPLICATION SPECIFIC RULES                      -->
	<!-- ======================================================================== -->
  <convrule rulename="Natsource_rule">
    <description>
      Derives the name of the Natural Adapter from the Map name. By default
      it generates an Adapter name by replacing the first letter M found in the Map name
      by an A, or appending an A, if no M is found. That is: From a Map named XXXMYYYB
      an Adapter named XXXAYYYB is generated. From a Map named XXXNYYYB an Adapter named
      XXXNYYYBA is generated (an invalid name, but the best possible try).
      You should adapt this rule according to your naming conventions.
    </description>
    <source>
      <sourceitem>identity</sourceitem>
      <selection>
        <selectattr>idName</selectattr>
        <selectval>([^M]*)(M?)(.*)</selectval>
      </selection>
    </source>
    <target>
      <targetitem>$.</targetitem>
      <targetattr>
        <attrname>$$NATSOURCE$$</attrname>
        <attrvalue>$1A$3</attrvalue>
      </targetattr>
    </target>
  </convrule>
	<convrule rulename="Function_rule" lone="true">
		<description>Generates a button from specific literals.</description>
		<source>
			<sourceitem>ltLiteral</sourceitem>
			<selection>
				<selectattr>ltName</selectattr>
				<selectval>(F[0-9]+)(\p{Space})(.*)</selectval>
			</selection>
		</source>
		<target>
			<targetitem>$BUTTON_TEMPLATE</targetitem>
			<targetattr>
				<attrname>name</attrname>
				<attrvalue>$1</attrvalue>
			</targetattr>
			<targetattr>
				<attrname>method</attrname>
				<attrvalue>P$1</attrvalue>
			</targetattr>
		</target>
		<target>
			<targetitem>hdist</targetitem>
			<targetattr>
				<attrname>width</attrname>
				<attrvalue>4</attrvalue>
			</targetattr>
		</target>
		<target>
			<targetitem>label</targetitem>
			<targetattr>
				<attrname>name</attrname>
				<attrvalue>$3</attrvalue>
			</targetattr>
		</target>
	</convrule>
	<convrule rulename="Titlevar_rule" lone="true">
		<description>Determines the Map title.</description>
		<source>
			<sourceitem>ltLiteral</sourceitem>
			<selection>
				<selectattr>ltName</selectattr>
				<selectval>\*\*\*(.*)\*\*\*</selectval>
			</selection>
			<sourcecond>
				<condattr>ltRow</condattr>
				<condvalue>1</condvalue>
			</sourcecond>
		</source>
		<target>
			<targetitem>$.</targetitem>
			<targetattr>
				<attrname>$$TITLEVAR$$</attrname>
				<attrvalue>$1</attrvalue>
			</targetattr>
		</target>
	</convrule>
	<convrule rulename="Ltignore_rule" lone="true">
		<description>Determines which literals shall be ignored.</description>
		<source>
			<sourceitem>ltLiteral</sourceitem>
			<sourcecond>
				<condattr>ltName</condattr>
				<condvalue>[\*\p{Space}]*;\/</condvalue>
			</sourcecond>
		</source>
	</convrule>
</convrules>
